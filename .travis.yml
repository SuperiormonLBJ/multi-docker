sudo: required
language: generic

services:
  - docker
# build image (Dev file), build files should be under ./client folder
before_install:
  - docker build -t superiormon187/react-test -f ./client/Dockerfile.dev ./client
# run test for react frontend (only)
script:
  - docker run -e CI=true superiormon187/react-test npm test
# if test is suscess, then can build all the images (Prod, using Dockerfile)
after_success:
  - docker build -t superiormon187/multi-client ./client
  - docker build -t superiormon187/multi-nginx ./nginx
  - docker build -t superiormon187/multi-server ./server
  - docker build -t superiormon187/multi-worker ./worker
  # Log in to the docker CLI, env variables are stored in travis
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  # Take those images and push them to docker hub
  - docker push superiormon187/multi-client
  - docker push superiormon187/multi-nginx
  - docker push superiormon187/multi-server
  - docker push superiormon187/multi-worker

# deploy to AWS beanstalk
deploy:
  provider: elasticbeanstalk # pre-defined option in travis 
  region: "ap-southeast-1" # get from the domain url of beanstalk application
  app: "multi-docker" # app name of beanstalk 
  env: "Multi-docker-env" # env of beanstalk 
  bucket_name: "elasticbeanstalk-ap-southeast-1-119828353856" # this is auto created with elastic beanstalk
  bucket_path: "docker-multi" # path folder to store the prod zipped files
  on:
    branch: master
  # this is from user with admin access to the created elastic beanstalk resource
  # can not out directly in this public file, we need to define in travis env variable instead
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY

# Note: inside Dockerfile we need to define: "EXPOSE: 80" to indicate which port on docker should 
# be mappeed to aws elatic beanstalk
# Also, please note that here elatic beanstalk can only find Dockerfile, while actually here we 
# use Dockerfile.dev to build image. Dont get confused.
